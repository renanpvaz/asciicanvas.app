{"version":3,"sources":["src/Canvas.ts","src/Tool/Pencil.ts","src/State.ts","src/History.ts","src/util.ts","src/Tool/Line.ts","src/Tool/Eraser.ts","src/Tool/Fill.ts","src/Tool/Square.ts","src/Tool/Text.ts","src/Tool/Ellipse.ts","src/Toolbar.ts","src/Menu.ts","src/index.ts"],"names":[],"mappings":";AAyN8B,aAAA,IAAA,EAAA,MAAA,KAAA,gBAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,GAAA,UAAA,GAAA,OAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,UAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA7M9B,IAAM,EAAe,SAAC,EAAe,GAC7B,IAAA,EAAU,SAAS,cAAc,UACjC,EAAM,EAAQ,WAAW,MACzB,EAAM,OAAO,kBAAoB,EAQhC,OANP,EAAQ,MAAQ,EAAQ,EACxB,EAAQ,OAAS,EAAS,EAC1B,EAAQ,MAAM,MAAW,EAAK,KAC9B,EAAQ,MAAM,OAAY,EAAM,KAChC,EAAI,MAAM,EAAK,GAER,GAGH,EAAa,SAAC,GACZ,IAAA,EAAU,EAAa,EAAM,MAAO,EAAM,QAKzC,OAJK,EAAQ,WAAW,MAE3B,KAAO,iBAEJ,GAyLA,QAAA,WAAA,EAtLI,QAAA,YAAc,SAAC,GACpB,IAAA,EAAU,SAAS,cAAc,UAAU,WAAW,MAE5D,EAAQ,KAAU,EAAQ,eAEpB,IAAA,EAAU,EAAQ,YAAY,KAE7B,MAAA,CACL,MAAO,EAAQ,MACf,OAA0C,IAAlC,EAAQ,0BAIP,QAAA,UAAY,SAAC,EAAgB,GAAd,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAAoC,MAAA,CAC3D,CAAE,EAAG,EAAI,EAAG,EAAC,GACb,CAAE,EAAG,EAAI,EAAG,EAAC,GACb,CAAE,EAAC,EAAE,EAAG,EAAI,GACZ,CAAE,EAAC,EAAE,EAAG,EAAI,KAGP,QAAA,cAAgB,SAAC,EAAgB,EAAc,GACtD,GAAW,IAAX,EAAc,MAAO,CAAC,GACtB,GAAW,IAAX,EAAc,OAAA,EAAA,CAAQ,GAAW,QAAA,UAAU,EAAQ,IAKlD,IAHC,IAAA,EAAgB,GACd,EAAA,KAAA,IAAK,EAAA,KAAA,KAEJ,EAAI,EAAO,EAAI,EAAQ,EAAI,EAAO,EAAI,EAAQ,IAEhD,IADC,IAAA,EAAQ,EAAS,EAAI,GAAM,EAAO,EAAI,GAAK,IAAW,GACnD,EAAI,EAAO,EAAI,EAAO,EAAI,EAAO,EAAI,EAAO,IACnD,EAAM,KAAW,CAAE,EAAC,EAAE,EAAG,KAAK,MAAM,KAIjC,OAAA,GAGT,IAAM,EAAgB,SAAC,EAAgB,GAAd,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAC1B,OAAA,EAAI,EAAM,MAAQ,EAAM,WACxB,EAAI,GACJ,EAAI,OAAO,YAAc,EAAM,YAC/B,EAAI,GAEA,EAAM,SAAC,EAAW,GAAiB,OAAA,EAAC,IAAI,GA2IA,QAAA,IAAA,EAzI9C,IAAM,EAAU,SAAC,GACT,IAGA,EAAqB,SAAC,EAAG,GAC7B,OAAA,EAAc,CAAE,EAAC,EAAE,EAAC,EAAE,MAAO,KAAM,MAAO,MAAQ,QAC9C,EALiB,SAAC,EAAW,GACjC,OAAA,EAAM,OAAO,EAAI,EAAG,KAAO,CAAE,EAAC,EAAE,EAAC,GAK7B,CAAe,EAAG,IAElB,EAAM,SAAC,EAAW,EAAW,QAAA,IAAA,IAAA,EAAe,EAAM,MAChD,IAAA,EAAW,EAAI,EAAG,GAIpB,KAFF,GAAY,EAAS,QAAU,GAAQ,EAAS,QAAU,EAAM,OAEtD,CACJ,IAAA,EAAI,EAAI,EAAG,GACjB,EAAM,OAAO,GAAK,CAAE,MAAO,EAAM,MAAO,EAAM,MAAO,EAAC,EAAE,EAAC,GACzD,EAAM,WAAW,KAAK,KAuCnB,MAAA,CACL,IAAG,EACH,IAAG,EACH,WAnCiB,SAAC,EAAW,EAAW,QAAA,IAAA,IAAA,EAAe,EAAM,MACvD,IAAA,EAAI,EAAI,EAAG,GAEZ,EAAoB,CAAE,EAAC,EAAE,EAAC,GAAI,KACjC,EAAM,QAAQ,GAAK,CACjB,MAAO,EACP,MAAO,EAAM,MACb,EAAC,EACD,EAAC,KA4BL,aAxBmB,WACb,IAAA,EAAQ,EAAM,QAEf,IAAA,IAAM,KAAK,EAAO,CACf,IAAA,EAAW,EAAI,EAAM,GAAG,EAAG,EAAM,GAAG,GAC1C,EAAM,GAAK,IAoBb,aAhBmB,WACb,IAAA,EAAQ,EAAM,QAEf,IAAA,IAAM,KAAK,EAAO,CACf,IAAA,EAAO,EAAM,GACf,EAAK,QAAO,EAAM,OAAO,GAAK,GAGpC,EAAM,QAAU,IAShB,OAzCa,SAAC,EAAe,GAC7B,OAAA,EAAM,QAAQ,SAAA,GAAK,OAAA,EAAI,EAAE,EAAG,EAAE,EAAG,QAmHhB,QAAA,QAAA,EAvErB,IAAM,EAAW,SAAC,EAAc,GACxB,IAAA,EAAc,EAAa,EAAM,MAAO,EAAM,QAC9C,EAAM,EAAY,WAAW,MAEnC,EAAI,YAAc,UAClB,EAAI,UAAY,GAEX,IAAA,IAAI,EAAI,EAAG,EAAI,EAAM,MAAO,GAAK,EAAM,UAC1C,EAAI,YACJ,EAAI,OAAO,EAAG,GACd,EAAI,OAAO,EAAG,EAAM,QACpB,EAAI,SAED,IAAA,IAAI,EAAI,EAAG,EAAI,EAAM,OAAQ,GAAK,EAAM,WAC3C,EAAI,YACJ,EAAI,OAAO,EAAG,GACd,EAAI,OAAO,EAAM,MAAO,GACxB,EAAI,SAGN,EAAU,OAAO,MAAM,gBAAkB,QAAQ,EAAY,YAAW,MAmDtC,QAAA,SAAA,EAhDpC,IAAM,EAAO,SAAC,EAAc,GAC1B,EAAQ,aAAe,MACvB,EAAQ,KAAU,EAAM,SAAQ,eAE1B,IAAA,EAAW,SAAC,GACX,EAAK,QACV,EAAQ,UAAY,EAAK,MACzB,EAAQ,SACN,EAAK,MACL,EAAK,EAAI,EAAM,UACf,EAAK,EAAI,EAAM,cAIb,EAAY,SAAC,GACb,GACF,EAAQ,UACN,EAAK,EAAI,EAAM,UACf,EAAK,EAAI,EAAM,WACf,EAAM,UACN,EAAM,aAIR,GAAA,EAAM,QAAQ,QAEX,IAAA,IAAM,KADX,EAAQ,UAAU,EAAG,EAAG,EAAQ,OAAO,MAAO,EAAQ,OAAO,QAC3C,EAAM,OAAQ,CAE9B,EADM,EAAO,EAAM,OAAO,QAH1B,CASC,IAAA,IAAM,KAAO,EAAM,QAAS,CAE/B,EADM,EAAO,EAAM,QAAQ,IAE3B,EAAS,GAGO,IAAA,IAAA,EAAA,EAAA,EAAA,EAAM,WAAN,EAAA,EAAA,OAAA,IAAkB,CAAzB,IACH,EADG,EAAG,EAAA,GAEZ,EADM,EAAO,EAAM,OAAO,IAE1B,EAAS,GAGX,EAAM,WAAa,KAGS,QAAA,KAAA;;;;ACpNjB,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJb,IAAA,EAAA,QAAA,aAEA,EAAA,EAAA,QAAA,4BAEa,QAAA,OAAe,CAC1B,KAAM,SACN,KAAI,EAAA,QACJ,OAAQ,QAAQ,EAAA,QAAI,mBACpB,UAAU,EACV,QAAS,SAAC,GAAE,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAAG,EAAA,EAAA,OAAQ,EAAA,EAAA,MACxB,EAAO,OAAO,EAAA,cAAc,EAAM,MAAQ,EAAS,CAAE,EAAC,EAAE,EAAC,GAAI;;ACmBpD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA3Bb,IAAA,EAAA,QAAA,iBAsBa,QAAA,cAAgB,SAAC,EAAW,EAAW,GAAkB,MAAA,CACpE,EAAG,KAAK,MAAM,EAAI,EAAM,WACxB,EAAG,KAAK,MAAM,EAAI,EAAM,cAGb,QAAA,aAAsB,CACjC,UAAU,EACV,OAAQ,GACR,QAAS,GACT,WAAY,EACZ,UAAW,EACX,KAAM,IACN,MAAO,UACP,aAAc,SACd,WAAY,GACZ,QAAS,CACP,KAAM,GACN,KAAM,GACN,SAAS,GAEX,KAAM,GACN,KAAM,EAAA,OACN,SAAU,KACV,KAAM,EACN,SAAU,GACV,MAAO,IACP,OAAQ;;ACLD,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA7BT,IAAM,EAAU,SAAC,GACT,IAAA,EAAO,SAAC,GACN,IAAA,EAAU,EAAM,QAAQ,GAC1B,GAAA,EAAQ,OAAQ,CAClB,EAAe,SAAT,EAAkB,OAAS,QAC3B,IAAA,EAAQ,EAAQ,MACtB,EAAM,OAAS,GAAS,GACxB,EAAM,QAAQ,SAAU,IAItB,EAAQ,SAAC,GACb,EAAM,QAAQ,GAAM,KAAI,EAAA,GAAM,EAAM,SACpC,EAAM,QAAQ,SAAU,GAMnB,MAAA,CACL,MAAO,WACL,EAAM,QAAQ,KAAO,GACrB,EAAM,SAER,KARW,WAAM,OAAA,EAAK,SAStB,QARc,WAAM,OAAA,EAAK,WAYpB,QAAA,QAAA;;ACuC4C,aAAA,IAAA,EAAA,MAAA,KAAA,QAAA,SAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,QAAA,GAAA,IAAA,EAAA,GAAA,EAAA,IAAA,GAAA,MAAA,GAAA,mBAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,EAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,EAAA,EAAA,OAAA,IAAA,EAAA,QAAA,EAAA,IAAA,GAAA,OAAA,UAAA,qBAAA,KAAA,EAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,EAAA,KAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAlFrD,IAAM,EAAO,SACX,EACA,EAGA,GA6EmD,IAAA,EA3E7C,EAAM,SAAS,cAAc,GAC3B,EAAA,EAAA,MAAA,OAAA,IAAA,EAAA,GAAA,EAAY,EAAA,EAAA,EAAA,CAAA,UAQb,OANP,OAAO,OAAO,EAAI,MAAO,GACzB,OAAO,OAAO,EAAK,GACX,QAAR,EAAA,SAAQ,IAAA,GAAA,EAAE,QAAQ,SAAA,GAChB,OAAA,EAAI,YAAyB,iBAAN,EAAiB,SAAS,eAAe,GAAK,KAGhE,GAkEA,QAAA,KAAA,EA/DT,IAAM,EAAU,SAAC,GACf,OAAA,EAAK,MAAO,CAAE,UAAW,IAAO,mBA8DnB,QAAA,QAAA,EA5Df,IAAM,EAAoB,SAAC,GACnB,IAAA,EAAM,EAAQ,GACd,GAAM,IAAI,eAAgB,kBAAkB,GAG3C,MAAA,kCAFO,KAAK,GAEgC,YAuD7B,QAAA,kBAAA,EApDxB,IAAM,EAAW,WAAM,OAAA,OAAO,WAAa,KAoDA,QAAA,SAAA,EAlD3C,IAAM,EAAkB,SAAC,GACvB,IAAA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,KAAA,OAAA,IAAA,EAAA,GAAA,EACA,EAAA,EAAA,MACA,EAAA,EAAA,OAQM,EAAM,EAAK,MAAO,CACtB,GAAI,YACJ,gBAAiB,OACjB,MAAO,CACL,SAAU,WACV,IAAQ,EAAI,EAAM,WAAa,GAAE,KACjC,KAAS,EAAI,EAAM,UAAY,GAAE,KACjC,SAAa,EAAM,SAAQ,KAC3B,WAAY,YACZ,OAAQ,IACR,QAAS,IACT,WAAY,QACZ,OAAQ,IACR,OAAQ,IACR,WAAY,IACZ,QAAS,sBAEX,YAAa,EACb,QAAS,SAAA,GACO,UAAV,EAAE,KAAoB,EAAE,WAC1B,EAAE,iBACF,SAAS,KAAK,YAAY,IACb,EAAI,aAAe,IAE3B,MAAM,MAAM,QAAQ,SAAC,EAAM,GAC9B,EAAK,MAAM,IAAI,QAAQ,SAAC,EAAM,GAC5B,EAAO,IAAI,EAAI,EAAU,EAAG,EAAI,EAAS,WAOnD,SAAS,KAAK,YAAY,GAC1B,EAAI,SAG+C,QAAA,gBAAA;;;;AClDxC,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjCb,IAAA,EAAA,EAAA,QAAA,0BAEM,EAAW,SAAC,EAAU,GAarB,IAZC,IAAA,EAAK,EAAG,EAAI,EAAG,EACf,EAAK,EAAG,EAAI,EAAG,EAEf,EAAK,KAAK,IAAI,GACd,EAAK,KAAK,IAAI,GAEd,EAAS,EAAK,EAAI,GAAK,EACvB,EAAS,EAAK,EAAI,GAAK,EAEvB,EAAI,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GACrB,EAAS,CAAC,CAAE,EAAG,EAAE,EAAG,EAAG,EAAE,IAEtB,EAAK,EAAG,EAAK,EAAG,EAAK,GAAM,EAAK,IAClC,GAAM,GAAM,GAAM,GAAM,GAAM,GACjC,EAAE,GAAK,EACP,GAAM,IAEN,EAAE,GAAK,EACP,GAAM,GAER,EAAO,KAAK,CAAE,EAAG,EAAE,EAAG,EAAG,EAAE,IAGtB,OAAA,GAOI,QAAA,KAAwB,CACnC,KAAM,OACN,KAAI,EAAA,QACJ,MAAO,GACP,OAAQ,YACR,cAAe,SAAC,EAAU,GAAR,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EACnB,EAAU,MAAc,CAAE,EAAC,EAAE,EAAC,IAEhC,YAAa,SAAC,GAAE,EAAA,OACP,gBAET,QAAS,SAAC,EAAkB,GAAhB,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAAG,EAAA,EAAA,OAAY,EAAA,EAAA,MACtB,EAAY,CAAE,EAAC,EAAE,EAAC,GAEpB,IACF,EAAO,eACP,EAAS,EAAO,GAAK,QAAQ,SAAA,GAAS,OAAA,EAAO,WAAW,EAAM,EAAG,EAAM;;;;AC9ChE,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJb,IAAA,EAAA,QAAA,aAEA,EAAA,EAAA,QAAA,4BAEa,QAAA,OAAe,CAC1B,KAAM,SACN,KAAI,EAAA,QACJ,QAAS,SAAC,GAAE,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAAG,EAAA,EAAA,OAAQ,EAAA,EAAA,MACxB,OAAA,EAAO,OAAO,EAAA,cAAc,EAAM,MAAQ,EAAS,CAAE,EAAC,EAAE,EAAC,GAAI,GAAQ;;;;ACL5D,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,IAAA,EAAA,EAAA,QAAA,4BAEa,QAAA,KAAa,CACxB,KAAM,OACN,KAAI,EAAA,QACJ,OAAQ,QAAQ,EAAA,QAAI,cACpB,QAAS,SAAC,GAAE,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAAG,EAAA,EAAA,MAAO,EAAA,EAAA,OACjB,EAAS,EAAO,IAAI,EAAG,GAuBzB,GArBS,SAAP,EAAQ,EAAsB,EAAW,GACvC,IAAA,EAAO,EAAO,IAAI,EAAG,GAEvB,GAAC,GAAQ,EAAK,QAAU,EAAxB,CAEJ,EAAO,IAAI,EAAG,GAER,IAAA,EAAgB,WACpB,EAAK,EAAO,EAAI,EAAG,GACnB,EAAK,EAAO,EAAI,EAAG,GACnB,EAAK,EAAO,EAAG,EAAI,GACnB,EAAK,EAAO,EAAG,EAAI,IAGjB,EAAM,WAAW,OAAS,IAC5B,sBAAsB,GAEtB,KAIQ,CAAK,EAAO,MAAO,EAAG;;;;ACCzB,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA/Bb,IAAA,EAAA,EAAA,QAAA,4BAEM,EAAgB,SAAC,EAAU,GACzB,IAAA,EAAgB,CAAC,EAAI,GAErB,EAAK,SAAC,EAAkB,GASrB,IAiBE,IAAA,EAAA,EAzBL,GAAU,EAER,EAAO,EAAG,GAAS,EAAG,GAAS,GAAK,EACpC,EAAO,EAAG,GAAS,EAAG,IAAU,EAAI,EAEtC,EAAI,EACJ,EAAI,GAEA,GAAS,CACT,IAAA,EAAW,EAAE,KAAW,EAAE,GAC1B,EAAW,EAAE,KAAW,EAAE,GAE3B,GAAU,EAAM,KAAM,EAAI,EAAA,EAAA,GAAW,KAAC,EAAA,IAAG,GAAQ,EAAE,GAAS,EAAI,KAChE,GAAU,EAAM,KAAM,EAAI,EAAA,EAAA,GAAW,KAAC,EAAA,IAAG,GAAQ,EAAE,GAAS,EAAI,KAErE,EAAU,GAAY,IAOnB,OAHP,EAAG,IAAK,KACR,EAAG,IAAK,KAED,GAGI,QAAA,OAAiC,CAC5C,KAAM,SACN,KAAI,EAAA,QACJ,MAAO,GACP,OAAQ,YACR,cAAe,SAAC,EAAkB,GAAhB,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAAG,EAAA,EAAA,OACtB,EAAY,MAAc,CAAE,EAAC,EAAE,EAAC,GAChC,EAAO,WAAW,EAAG,IAEvB,YAAa,SAAC,GAAE,EAAA,OACP,gBAET,QAAS,SAAC,EAAkB,GAAhB,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAAG,EAAA,EAAA,OACV,EAAY,CAAE,EAAC,EAAE,EAAC,GACxB,EAAO,eAEY,IAAA,IAAA,EAAA,EAAA,EAAA,EAAc,EAAY,MAAQ,GAAlC,EAAA,EAAA,OAAA,IAAwC,CAAhD,IAAA,EAAI,EAAA,GACb,EAAO,WAAW,EAAK,EAAG,EAAK;;;;AC9CxB,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,IAAA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,0BAEa,QAAA,KAAa,CACxB,KAAM,OACN,KAAI,EAAA,QACJ,OAAQ,OACR,YAAa,SAAC,GAAE,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAAG,EAAA,EAAA,MAAO,EAAA,EAAA,OACrB,EAAQ,SAAS,cAAc,cAEjC,GAAA,EAAO,OAAO,EAAM,SAExB,EAAA,gBAAgB,CACd,EAAC,EACD,EAAC,EACD,MAAK,EACL,OAAM;;;;ACbC,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,IAAA,EAAA,EAAA,QAAA,6BAEa,QAAA,QAAkC,CAC7C,KAAM,UACN,KAAI,EAAA,QACJ,MAAO,GACP,OAAQ,YACR,cAAe,SAAC,EAAkB,GAAhB,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAAG,EAAA,EAAA,OACtB,EAAY,MAAc,CAAE,EAAC,EAAE,EAAC,GAChC,EAAO,WAAW,EAAG,IAEvB,YAAa,SAAC,GAAE,EAAA,OACP,gBAET,QAAS,SAAC,EAAkB,GAAhB,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAAG,EAAA,EAAA,OAAY,EAAA,EAAA,MACxB,GAAC,EAAD,CACE,IAAA,EAAe,EAAf,EAAkB,EACxB,EAAO,eAgBF,IAdC,IAAA,EAAQ,EAAM,EAAI,EAClB,EAAQ,EAAM,EAAI,EAElB,EAAW,KAAK,KAAK,EAAQ,EAAQ,EAAQ,GAAS,EAEtD,EAAQ,EAAI,KAAK,GAAM,KAAK,MAAiB,GAAX,GAClC,EAAI,EAEJ,EAAc,KAAK,IAAI,EAAG,KAAK,IAAI,EAAQ,IAC3C,EAAa,KAAK,IAAI,EAAG,KAAK,IAAI,EAAQ,IAE1C,EAAU,EAAM,EAAI,EAAQ,EAC5B,EAAU,EAAM,EAAI,EAAQ,EAEzB,EAAQ,EAAG,EAAQ,EAAI,KAAK,GAAI,GAAS,EAAM,CAChD,IAAA,EAAI,EAAU,EAAa,EAAI,KAAK,IAAI,GACxC,EAAI,EAAU,EAAc,EAAI,KAAK,IAAI,GAC/C,EAAO,WAAW,KAAK,MAAM,GAAI,KAAK,MAAM;;ACWzC,aAAA,IAAA,EAAA,MAAA,KAAA,gBAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,GAAA,UAAA,GAAA,OAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,UAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjDT,IAAA,EAAA,QAAA,UAGA,EAAA,QAAA,iBACA,EAAA,QAAA,eACA,EAAA,QAAA,iBACA,EAAA,QAAA,eACA,EAAA,QAAA,iBACA,EAAA,QAAA,eACA,EAAA,QAAA,kBAEM,EAAqB,CAAC,EAAA,OAAQ,EAAA,OAAQ,EAAA,KAAM,EAAA,KAAM,EAAA,KAAM,EAAA,OAAQ,EAAA,SAEhE,EAAgB,SAAC,EAAc,GACnC,OAAA,EAAA,KAAK,UAAW,CAAE,UAAW,WAAW,EACnC,EAAM,IAAI,SAAA,GACX,OAAA,EAAA,KACE,SACA,CACE,UAAW,OACX,QAAS,SAAA,GA6BV,IAAA,EA5BS,EAAyB,EAAE,OAEnB,QAAd,EAAA,EAAM,gBAAQ,IAAA,GAAA,EAAE,UAAU,OAAO,gBACjC,EAAI,UAAU,OAAO,gBAErB,EAAM,KAAO,EACb,EAAM,SAAW,EACjB,EAAI,OAAO,MAAM,OAAS,EAAK,QAAU,YAG7C,CAAC,EAAA,KAAK,MAAO,CAAE,IAAK,EAAK,KAAM,MAAO,CAAE,cAAe,cAE1D,CACD,EAAA,KAAK,SAAU,CAAE,UAAW,mBAAqB,CAC/C,EAAA,WACI,GACA,EAAA,KAAK,QAAS,CACZ,UAAW,cACX,MAAO,IACP,KAAM,QACN,IAAK,KACL,IAAK,IACL,KAAM,IACN,SAAU,SAAA,GAAM,OAAA,EAAM,MAA2B,EAAE,OAAQ,eAK9D,QAAA,cAAA;;AC2MA,aAAA,IAAA,EAAA,MAAA,KAAA,gBAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,GAAA,UAAA,GAAA,OAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,UAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA5PT,IAAA,EAAA,QAAA,UAEA,EAAA,QAAA,YAGM,EAAiB,SAAC,GAGjB,IAoPE,IAAA,EAtPH,EAAO,GAEF,EAAI,EAAG,EAAI,EAAM,OAAQ,IAAK,CAChC,IAAA,IAAI,EAAI,EAAG,EAAI,EAAM,MAAO,IAAK,CAEpC,IAAY,QAAJ,EADK,EAAM,OAAO,EAAA,IAAI,EAAG,WACrB,IAAA,OAAA,EAAA,EAAE,QAAS,IAEzB,GAAQ,KAGH,OAAA,GAGH,EAAc,WACZ,IAAA,EAAU,SAAS,cAAc,KACvC,EAAQ,aACN,OACA,SAAS,cAAc,UAAW,UAAU,cAE9C,EAAQ,aAAa,WAAY,gBAEjC,EAAQ,MAAM,QAAU,OACxB,SAAS,KAAK,YAAY,GAE1B,EAAQ,QAER,SAAS,KAAK,YAAY,IAGtB,EAAe,SAAC,GAChB,IAAA,EAAU,SAAS,cAAc,KACrC,EAAQ,aACN,OACA,iCACE,mBAAmB,EAAe,KAEtC,EAAQ,aAAa,WAAY,gBAEjC,EAAQ,MAAM,QAAU,OACxB,SAAS,KAAK,YAAY,GAE1B,EAAQ,QAER,SAAS,KAAK,YAAY,IAGtB,EAAe,SAAC,GAChB,IAAA,EAAW,SAAS,cAAc,YACtC,EAAS,MAAQ,EAAe,GAEhC,EAAS,MAAM,IAAM,IACrB,EAAS,MAAM,KAAO,IACtB,EAAS,MAAM,SAAW,QAE1B,SAAS,KAAK,YAAY,GAC1B,EAAS,QACT,EAAS,SAEL,IACF,SAAS,YAAY,QACrB,MAAO,IAET,SAAS,KAAK,YAAY,IAGtB,EAAwB,SAAC,EAAgB,GAC7C,OAAA,EAAA,KACE,KACA,CACE,UAAW,+BACX,QAAS,WACP,EAAM,KAAO,EAEX,SAAS,cAAc,eACtB,MAAQ,EACX,SAAS,KAAK,UAGlB,CAAC,EAAA,KAAK,OAAQ,GAAI,CAAC,OAGjB,EAAY,SAAC,GACjB,IAMI,EAAe,EANnB,EAAA,EAAA,MAOM,GANN,EAAA,IAMY,EAAA,KAAK,MAAO,CAAE,UAAW,cAAgB,CACnD,EAAA,KACE,OACA,CACE,SAAU,SAAC,GAyJV,IAAA,EAxJC,EAAE,iBACF,EAAM,MAAQ,EAAQ,EAAM,UAAY,EACxC,EAAM,OAAS,EAAS,EAAM,WAAa,EAC3C,EAAM,OAAS,GACf,EAAM,WAAa,GACnB,EAAM,QAAQ,SAAU,EAElB,IAAA,EAAY,EAAA,WAAW,GAEG,QAAhC,EAAA,SAAS,cAAc,iBAAS,IAAA,GAAA,EAAE,YAAY,GAC9C,EAAA,SAAS,EAAO,EAAU,WAAW,OACrC,SAAS,KAAK,YAAY,KAG9B,CACE,EAAA,KAAK,MAAO,CAAE,UAAW,mBAAqB,CAC5C,EAAA,KAAK,QAAS,CAAE,UAAW,SAAW,CACpC,WACA,EAAA,KAAK,QAAS,CACZ,UAAW,QACX,SAAU,SAAA,GAAM,OAAA,GAA4B,EAAE,OAAQ,WAG1D,EAAA,KAAK,QAAS,CAAE,UAAW,SAAW,CACpC,cACA,EAAA,KAAK,QAAS,CACZ,UAAW,QACX,SAAU,SAAA,GAAM,OAAA,GAA6B,EAAE,OAAQ,aAI7D,EAAA,KAAK,SAAU,CAAE,UAAW,SAAU,KAAM,UAAY,CAAC,eAK/D,SAAS,KAAK,YAAY,IAGtB,EAAc,SAClB,EACA,EACA,GAEA,OAAA,EAAA,KAAK,SAAU,CAAE,UAAW,QAAU,CACpC,EAAA,KAAK,SAAU,CAAE,UAAW,8BAAgC,CAC1D,OACA,EAAA,KAAK,KAAM,CAAE,UAAW,aAAe,CACrC,EAAA,KACE,KACA,CACE,UAAW,YACX,QAAS,WAAM,OAAA,EAAU,CAAE,MAAK,EAAE,IAAG,MAEvC,CAAC,EAAA,KAAK,OAAQ,GAAI,CAAC,QAAS,EAAA,KAAK,QAAS,GAAI,CAAC,YAEjD,EAAA,KACE,KACA,CACE,UAAW,YACX,QAAS,WACH,UAAU,OACZ,UAAU,MAAM,CACd,MAAO,mBACP,KACE,8DACF,IAAK,OAAO,SAAS,SAI7B,CAAC,EAAA,KAAK,OAAQ,GAAI,CAAC,YAErB,EAAA,KACE,KACA,CACE,UAAW,YACX,QAAS,WAAM,OAAA,EAAa,KAE9B,CAAC,EAAA,KAAK,OAAQ,GAAI,CAAC,WAErB,EAAA,KAAK,KAAM,CAAE,UAAW,4BAA8B,CACpD,EAAA,KAAK,OAAQ,GAAI,CAAC,WAClB,EAAA,KAAK,QAAS,GAAI,CAChB,EAAA,QAAQ,sNAMV,EAAA,KAAK,KAAM,CAAE,UAAW,8BAAgC,CACtD,EAAA,KAAK,KAAM,CAAE,UAAW,aAAe,CACrC,EAAA,KAAK,OAAQ,CAAE,QAAS,WAAM,OAAA,EAAa,KAAU,CACnD,kBAGJ,EAAA,KAAK,KAAM,CAAE,UAAW,aAAe,CACrC,EAAA,KAAK,OAAQ,CAAE,QAAS,GAAe,CAAC,2BAMlD,EAAA,KAAK,SAAU,CAAE,UAAW,8BAAgC,CAC1D,OACA,EAAA,KAAK,KAAM,CAAE,UAAW,aAAe,CACrC,EAAA,KAAK,KAAM,CAAE,UAAW,YAAa,QAAS,WAAM,OAAA,EAAQ,SAAU,CACpE,EAAA,KAAK,OAAQ,GAAI,CAAC,SAClB,EAAA,KAAK,QAAS,GAAI,CAAC,YAErB,EAAA,KACE,KACA,CAAE,UAAW,YAAa,QAAS,WAAM,OAAA,EAAQ,YACjD,CAAC,EAAA,KAAK,OAAQ,GAAI,CAAC,SAAU,EAAA,KAAK,QAAS,GAAI,CAAC,sBAmBtD,EAAA,KAAK,SAAU,CAAE,UAAW,uCAAyC,CACnE,EAAA,KAAK,QAAS,CACZ,UAAW,yBACX,UAAW,EACX,MAAO,IACP,SAAU,SAAA,GAAM,OAAA,EAAM,KAA0B,EAAE,OAAQ,SAE5D,EAAA,KAAK,KAAM,CAAE,UAAW,aAAa,EAChC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAK,IAAI,SAAA,GACpC,OAAA,EAAsB,EAAG,SAI/B,EAAA,KAAK,QAAS,CACZ,UAAW,2BACX,KAAM,QACN,MAAO,UACP,SAAU,SAAA,GAAM,OAAA,EAAM,MAA2B,EAAE,OAAQ,YAIxD,QAAA,YAAA;;ACpHT,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAxIA,IAAA,EAAA,QAAA,WACA,EAAA,QAAA,YACA,EAAA,QAAA,aACA,EAAA,QAAA,aACA,EAAA,QAAA,UACA,EAAA,QAAA,UAEM,EAAK,EAAA,GAAQ,EAAA,cACb,EAAU,EAAA,WAAW,GACrB,EAAM,EAAQ,WAAW,MAE3B,GAAU,EAER,EAAO,WACX,SAAS,KAAK,YACZ,EAAA,KAAK,OAAQ,GAAI,CACf,EAAA,YAAY,EAAO,EAAK,EAAA,QAAQ,IAChC,EAAA,KAAK,MAAO,CAAE,UAAW,WAAa,CACpC,EAAA,cAAc,EAAO,GACrB,EAAA,KAAK,MAAO,CAAE,UAAW,oBAAsB,CAAC,IAChD,EAAA,WACI,EAAA,KAAK,MAAO,CAAE,UAAW,uBAAyB,CAChD,EAAA,KAAK,QAAS,CACZ,UAAW,cACX,MAAO,IACP,KAAM,QACN,IAAK,KACL,IAAK,IACL,KAAM,IACN,SAAU,SAAA,GACP,OAAA,EAAM,MAA2B,EAAE,OAAQ,WAGlD,QAIW,SAAS,cAAc,SAAU,QAEhD,IAAA,EAAU,EAAQ,WAClB,EAAU,EAAQ,UAElB,EAAiB,SACrB,EACA,GAEM,IAAA,EAAU,EAAM,KAAK,GAEvB,GACF,EAAO,EAAA,EAAA,GAEA,EAAA,cAAc,EAAO,EAAI,EAAS,EAAO,EAAI,EAAS,IAAM,CAC/D,MAAK,EACL,OAAQ,EAAA,QAAQ,KAElB,EAAM,KAAK,QAIX,EAAkB,SAAC,GACvB,EAAM,UAAW,EACjB,EAAe,gBAAiB,GAChC,EAAA,QAAQ,GAAO,SAEX,EAAgB,SAAC,GACrB,EAAM,UAAW,EACjB,EAAe,cAAe,GAC9B,EAAe,UAAW,IAEtB,EAAkB,SAAC,GACnB,EAAM,UAAU,EAAe,UAAW,IAG1C,EAAiB,SAAC,GAAmB,MAAA,CACzC,EAAG,EAAE,eAAe,GAAG,MACvB,EAAG,EAAE,eAAe,GAAG,QAGrB,EAAA,YACF,EAAQ,iBAAiB,aAAc,SAAA,GACrC,OAAA,EAAgB,EAAe,MAEjC,EAAQ,iBAAiB,WAAY,SAAA,GAAK,OAAA,EAAc,EAAe,MACvE,EAAQ,iBAAiB,YAAa,SAAA,GACpC,OAAA,EAAgB,EAAe,QAGjC,EAAQ,iBAAiB,YAAa,SAAA,GAAK,OAAA,EAAgB,KAC3D,EAAQ,iBAAiB,UAAW,SAAA,GAAK,OAAA,EAAc,KACvD,EAAQ,iBAAiB,YAAa,SAAA,GACpC,EAAgB,GAChB,EAAE,qBAIN,SAAS,iBAAiB,UAAW,SAAA,GACnC,EAAM,KAAK,EAAE,MAAO,IAEtB,SAAS,iBAAiB,QAAS,SAAA,GACjC,EAAM,KAAK,EAAE,MAAO,IAGhB,IAAA,EAAA,EAAA,YAAA,IAAE,EAAA,EAAA,MAAO,EAAA,EAAA,OACf,EAAM,UAAY,EAClB,EAAM,WAAa,EAEnB,EAAA,SAAS,EAAO,GAChB,KAGI,EAAoC,CACxC,CAAC,eAAgB,WAAM,OAAA,EAAA,QAAQ,GAAO,YACtC,CAAC,SAAU,WAAM,OAAA,EAAA,QAAQ,GAAO,UAG5B,EAAe,CAAC,QAAS,OAAQ,QAEjC,EAAO,SAAP,IACE,IAAA,EAAW,EAAU,KAAK,SAAC,GAC/B,OADgC,EAAA,GAC3B,MAAM,KAAK,MAAM,SAAA,GAAO,OAAA,EAAM,KAAK,OAGtC,IACF,EAAS,KACT,EAAM,KAAO,EAAa,OACxB,SAAC,EAAK,GAWZ,IAAA,EAXoB,OAAA,EAAA,EAAA,GAAM,KAAG,EAAA,IAAG,GAAM,EAAM,KAAK,GAAI,KAC/C,KAIJ,EAAA,KAAK,EAAO,GACP,GAAS,sBAAsB,IAGtC,OAAO,iBAAiB,OAAQ,WAAM,OAAA,OAAO,SAAS,EAAG,KACzD,SAAS,iBAAiB,mBAAoB,GAC9C,SAAS,iBAAiB,QAAS,SAAA,GAC3B,IAAA,EAAQ,SAAS,cAAc,cAEjC,GAAO,EAAM,SAEb,IAAA,GAAS,EAAM,eAAiB,OAAO,eAAgB,QAAQ,QAEnE,EAAA,gBAAgB,CACd,EAAG,EACH,EAAG,EACH,MAAK,EACL,KAAM,EACN,OAAQ,EAAA,QAAQ,KAGlB,EAAM","file":"src.d130a6bb.js","sourceRoot":"..","sourcesContent":["import { State } from './State'\nimport { Cell } from './Cell'\n\nexport type Canvas = {\n  get: (x: number, y: number) => Cell | undefined\n  set: (x: number, y: number, char?: string) => void\n  setAll: (cells: Cell[], char?: string) => void\n  setPreview: (x: number, y: number, char?: string) => void\n  clearPreview: () => void\n  applyPreview: () => void\n}\n\nconst createCanvas = (width: number, height: number) => {\n  const $canvas = document.createElement('canvas')\n  const ctx = $canvas.getContext('2d')!\n  const dpr = window.devicePixelRatio || 1\n\n  $canvas.width = width * dpr\n  $canvas.height = height * dpr\n  $canvas.style.width = `${width}px`\n  $canvas.style.height = `${height}px`\n  ctx.scale(dpr, dpr)\n\n  return $canvas\n}\n\nconst initCanvas = (state: State) => {\n  const $canvas = createCanvas(state.width, state.height)\n  const ctx = $canvas.getContext('2d')!\n\n  ctx.font = '14px monospace'\n\n  return $canvas\n}\n\nexport const measureText = (fontSize: number) => {\n  const context = document.createElement('canvas').getContext('2d')!\n\n  context.font = `${fontSize}px monospace`\n\n  const metrics = context.measureText('$')\n\n  return {\n    width: metrics.width,\n    height: metrics.actualBoundingBoxAscent * 1.5,\n  }\n}\n\nexport const neighbors = ({ x, y }: Cell, state: State): Cell[] => [\n  <Cell>{ x: x + 1, y },\n  <Cell>{ x: x - 1, y },\n  <Cell>{ x, y: y + 1 },\n  <Cell>{ x, y: y - 1 },\n]\n\nexport const getNNeighbors = (radius: number, center: Cell, state: State) => {\n  if (radius === 1) return [center]\n  if (radius === 2) return [center, ...neighbors(center, state)]\n\n  const cells: Cell[] = []\n  const { sin, acos } = Math\n\n  for (let x = center.x - radius; x < center.x + radius; x++) {\n    const yspan = radius * sin(acos((center.x - x) / radius)) * 0.5\n    for (let y = center.y - yspan; y < center.y + yspan; y++) {\n      cells.push(<Cell>{ x, y: Math.round(y) })\n    }\n  }\n\n  return cells\n}\n\nconst isOutOfBounds = ({ x, y }: Cell, state: State): boolean =>\n  x > state.width / state.cellWidth ||\n  x < 0 ||\n  y > window.innerHeight / state.cellHeight ||\n  y < 0\n\nconst key = (x: number, y: number) => `${x},${y}`\n\nconst makeApi = (state: State): Canvas => {\n  const getWithDefault = (x: number, y: number): Cell =>\n    state.canvas[key(x, y)] || { x, y }\n\n  const get: Canvas['get'] = (x, y) =>\n    isOutOfBounds({ x, y, value: null, color: null }, state)\n      ? undefined\n      : getWithDefault(x, y)\n\n  const set = (x: number, y: number, char: string = state.char) => {\n    const prevCell = get(x, y)\n    const equal =\n      prevCell && prevCell.value === char && prevCell.color === state.color\n\n    if (!equal) {\n      const k = key(x, y)\n      state.canvas[k] = { value: char, color: state.color, x, y }\n      state.dirtyCells.push(k)\n    }\n  }\n\n  const setAll = (cells: Cell[], char?: string) =>\n    cells.forEach(c => set(c.x, c.y, char))\n\n  const setPreview = (x: number, y: number, char: string = state.char) => {\n    const k = key(x, y)\n\n    if (!isOutOfBounds(<Cell>{ x, y }, state))\n      state.preview[k] = {\n        value: char,\n        color: state.color,\n        x,\n        y,\n      }\n  }\n\n  const clearPreview = () => {\n    const cells = state.preview\n\n    for (const k in cells) {\n      const prevCell = get(cells[k].x, cells[k].y)\n      cells[k] = prevCell!\n    }\n  }\n\n  const applyPreview = () => {\n    const cells = state.preview\n\n    for (const k in cells) {\n      const cell = cells[k]\n      if (cell.value) state.canvas[k] = cell\n    }\n\n    state.preview = {}\n  }\n\n  return {\n    get,\n    set,\n    setPreview,\n    clearPreview,\n    applyPreview,\n    setAll,\n  }\n}\n\nconst drawGrid = (state: State, targetCtx: CanvasRenderingContext2D) => {\n  const $gridCanvas = createCanvas(state.width, state.height)\n  const ctx = $gridCanvas.getContext('2d')!\n\n  ctx.strokeStyle = '#7b7b7b'\n  ctx.lineWidth = 0.5\n\n  for (let x = 0; x < state.width; x += state.cellWidth) {\n    ctx.beginPath()\n    ctx.moveTo(x, 0)\n    ctx.lineTo(x, state.height)\n    ctx.stroke()\n  }\n  for (let y = 0; y < state.height; y += state.cellHeight) {\n    ctx.beginPath()\n    ctx.moveTo(0, y)\n    ctx.lineTo(state.width, y)\n    ctx.stroke()\n  }\n\n  targetCtx.canvas.style.backgroundImage = `url('${$gridCanvas.toDataURL()}')`\n}\n\nconst draw = (state: State, context: CanvasRenderingContext2D) => {\n  context.textBaseline = 'top'\n  context.font = `${state.fontSize}px monospace`\n\n  const drawCell = (cell: Cell) => {\n    if (!cell.value) return\n    context.fillStyle = cell.color\n    context.fillText(\n      cell.value,\n      cell.x * state.cellWidth,\n      cell.y * state.cellHeight,\n    )\n  }\n\n  const clearCell = (cell: Cell) => {\n    if (cell)\n      context.clearRect(\n        cell.x * state.cellWidth,\n        cell.y * state.cellHeight,\n        state.cellWidth,\n        state.cellHeight,\n      )\n  }\n\n  if (state.history.updated) {\n    context.clearRect(0, 0, context.canvas.width, context.canvas.height)\n    for (const key in state.canvas) {\n      const cell = state.canvas[key]\n      drawCell(cell)\n    }\n    return\n  }\n\n  for (const key in state.preview) {\n    const cell = state.preview[key]\n    clearCell(cell)\n    drawCell(cell)\n  }\n\n  for (const key of state.dirtyCells) {\n    const cell = state.canvas[key]\n    clearCell(cell)\n    drawCell(cell)\n  }\n\n  state.dirtyCells = []\n}\n\nexport { initCanvas, makeApi, draw, drawGrid, key }\n","import { Tool } from '../Tool'\nimport { getNNeighbors } from '../Canvas'\nimport { Cell } from '../Cell'\nimport icon from '../../assets/pencil.png'\n\nexport const Pencil: Tool = {\n  name: 'pencil',\n  icon,\n  cursor: `url('${icon}') 7 35, default`,\n  sizeable: true,\n  onPaint: ({ x, y, canvas, state }) => {\n    canvas.setAll(getNNeighbors(state.size || 0, <Cell>{ x, y }, state))\n  },\n}\n","import { History } from './History'\nimport { CellMap } from './Cell'\nimport { Tool } from './Tool'\nimport { Pencil } from './Tool/Pencil'\n\nexport type State = {\n  pressing: boolean\n  canvas: CellMap\n  preview: CellMap\n  cellWidth: number\n  cellHeight: number\n  char: string\n  color: string\n  selectedTool: string\n  dirtyCells: string[]\n  history: History\n  keys: { [key: string]: boolean }\n  tool: Tool<any>\n  $toolRef: HTMLButtonElement | null\n  size: number | null\n  fontSize: number\n  width: number\n  height: number\n}\n\nexport const getRealCoords = (x: number, y: number, state: State) => ({\n  x: Math.floor(x / state.cellWidth),\n  y: Math.floor(y / state.cellHeight),\n})\n\nexport const initialState: State = {\n  pressing: false,\n  canvas: {},\n  preview: {},\n  cellHeight: 0,\n  cellWidth: 0,\n  char: '$',\n  color: '#d238a8',\n  selectedTool: 'pencil',\n  dirtyCells: [],\n  history: {\n    undo: [],\n    redo: [],\n    updated: false,\n  },\n  keys: {},\n  tool: Pencil,\n  $toolRef: null,\n  size: 1,\n  fontSize: 14,\n  width: 600,\n  height: 443,\n}\n","import { CellMap } from './Cell'\nimport { State } from './State'\n\nexport type History = {\n  undo: CellMap[]\n  redo: CellMap[]\n  updated: boolean\n}\n\ntype EntryType = 'undo' | 'redo'\n\nexport type HistoryApi = {\n  track: () => void\n  back: () => void\n  forward: () => void\n}\n\nconst history = (state: State): HistoryApi => {\n  const save = (type: EntryType) => {\n    const entries = state.history[type]\n    if (entries.length) {\n      track(type === 'undo' ? 'redo' : 'undo')\n      const entry = entries.pop()\n      state.canvas = entry || {}\n      state.history.updated = true\n    }\n  }\n\n  const track = (type: EntryType) => {\n    state.history[type].push({ ...state.canvas })\n    state.history.updated = false\n  }\n\n  const back = () => save('undo')\n  const forward = () => save('redo')\n\n  return {\n    track: () => {\n      state.history.redo = []\n      track('undo')\n    },\n    back,\n    forward,\n  }\n}\n\nexport { history }\n","import { State } from './State'\nimport { Canvas } from './Canvas'\n\nconst html = <K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  attributes: Partial<Omit<HTMLElementTagNameMap[K], 'style'>> & {\n    style?: Partial<CSSStyleDeclaration>\n  },\n  children?: (HTMLElement | string)[],\n): HTMLElementTagNameMap[K] => {\n  const $el = document.createElement(tag)\n  const { style = {}, ...attrs } = attributes\n\n  Object.assign($el.style, style)\n  Object.assign($el, attrs)\n  children?.forEach(c =>\n    $el.appendChild(typeof c === 'string' ? document.createTextNode(c) : c),\n  )\n\n  return $el\n}\n\nconst htmlRaw = (raw: string): HTMLElement =>\n  html('div', { innerHTML: raw }).firstElementChild as HTMLElement\n\nconst makeCursorFromSvg = (rawSvg: string) => {\n  const svg = htmlRaw(rawSvg)\n  const xml = new XMLSerializer().serializeToString(svg!)\n  const svg64 = btoa(xml)\n\n  return `url('${`data:image/svg+xml;base64,${svg64}`}'), auto`\n}\n\nconst isMobile = () => window.innerWidth < 767\n\nconst createSelection = ({\n  x,\n  y,\n  text = '',\n  state,\n  canvas,\n}: {\n  x: number\n  y: number\n  text?: string\n  state: State\n  canvas: Canvas\n}) => {\n  const $el = html('pre', {\n    id: 'text-edit',\n    contentEditable: 'true',\n    style: {\n      position: 'absolute',\n      top: `${y * state.cellHeight + 32}px`,\n      left: `${x * state.cellWidth + 58}px`,\n      fontSize: `${state.fontSize}px`,\n      fontFamily: 'monospace',\n      zIndex: '1',\n      padding: '0',\n      background: 'white',\n      border: '0',\n      margin: '0',\n      lineHeight: '1',\n      outline: '2px dashed #03A9F4',\n    },\n    textContent: text,\n    onkeyup: e => {\n      if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault()\n        document.body.removeChild($el)\n        const text = $el.textContent || ''\n\n        text.split('\\n').forEach((line, yOffset) => {\n          line.split('').forEach((char, xOffset) => {\n            canvas.set(x + xOffset - 1, y + yOffset, char)\n          })\n        })\n      }\n    },\n  })\n\n  document.body.appendChild($el)\n  $el.focus()\n}\n\nexport { html, htmlRaw, makeCursorFromSvg, isMobile, createSelection }\n","import { Tool } from '../Tool'\nimport { Cell } from '../Cell'\nimport icon from '../../assets/line.png'\n\nconst walkGrid = (p0: Cell, p1: Cell) => {\n  const dx = p1.x - p0.x\n  const dy = p1.y - p0.y\n\n  const nx = Math.abs(dx)\n  const ny = Math.abs(dy)\n\n  const sign_x = dx > 0 ? 1 : -1\n  const sign_y = dy > 0 ? 1 : -1\n\n  const p = { x: p0.x, y: p0.y }\n  const points = [{ x: p.x, y: p.y }]\n\n  for (let ix = 0, iy = 0; ix < nx || iy < ny; ) {\n    if ((0.5 + ix) / nx < (0.5 + iy) / ny) {\n      p.x += sign_x\n      ix += 1\n    } else {\n      p.y += sign_y\n      iy += 1\n    }\n    points.push({ x: p.x, y: p.y })\n  }\n\n  return points\n}\n\ntype LineState = {\n  start?: Cell\n}\n\nexport const Line: Tool<LineState> = {\n  name: 'line',\n  icon,\n  state: {},\n  cursor: 'crosshair',\n  onPointerDown: ({ x, y }, lineState) => {\n    lineState.start = <Cell>{ x, y }\n  },\n  onPointerUp: ({ canvas }) => {\n    canvas.applyPreview()\n  },\n  onPaint: ({ x, y, canvas }, { start }) => {\n    const end = <Cell>{ x, y }\n\n    if (start) {\n      canvas.clearPreview()\n      walkGrid(start, end).forEach(point => canvas.setPreview(point.x, point.y))\n    }\n  },\n}\n","import { Tool } from '../Tool'\nimport { getNNeighbors } from '../Canvas'\nimport { Cell } from '../Cell'\nimport icon from '../../assets/eraser.png'\n\nexport const Eraser: Tool = {\n  name: 'eraser',\n  icon,\n  onPaint: ({ x, y, canvas, state }) =>\n    canvas.setAll(getNNeighbors(state.size || 0, <Cell>{ x, y }, state), ''),\n}\n","import { Tool } from '../Tool'\nimport { makeCursorFromSvg } from '../util'\nimport icon from '../../assets/bucket.png'\n\nexport const Fill: Tool = {\n  name: 'fill',\n  icon,\n  cursor: `url('${icon}'), default`,\n  onPaint: ({ x, y, state, canvas }) => {\n    const target = canvas.get(x, y)\n\n    const fill = (color: string | null, x: number, y: number) => {\n      const cell = canvas.get(x, y)\n\n      if (!cell || cell.color !== color) return\n\n      canvas.set(x, y)\n\n      const fillNeighbors = () => {\n        fill(color, x + 1, y)\n        fill(color, x - 1, y)\n        fill(color, x, y + 1)\n        fill(color, x, y - 1)\n      }\n\n      if (state.dirtyCells.length > 1000) {\n        requestAnimationFrame(fillNeighbors)\n      } else {\n        fillNeighbors()\n      }\n    }\n\n    if (target) fill(target.color, x, y)\n  },\n}\n","import { Tool } from '../Tool'\nimport { Cell } from '../Cell'\nimport icon from '../../assets/square.png'\n\nconst walkUntilMeet = (p0: Cell, p1: Cell): Cell[] => {\n  const cells: Cell[] = [p0, p1]\n\n  const go = (aAxis: 'x' | 'y', bAxis: 'x' | 'y') => {\n    let didMeet = false\n\n    const incA = p0[aAxis] < p1[aAxis] ? 1 : -1\n    const incB = p0[bAxis] < p1[bAxis] ? -1 : 1\n\n    let a = p0\n    let b = p1\n\n    while (!didMeet) {\n      const didAMeet = a[aAxis] === b[aAxis]\n      const didBMeet = a[bAxis] === b[bAxis]\n\n      if (!didAMeet) cells.push((a = <Cell>{ ...a, [aAxis]: a[aAxis] + incA }))\n      if (!didBMeet) cells.push((b = <Cell>{ ...b, [bAxis]: b[bAxis] + incB }))\n\n      didMeet = didAMeet && didBMeet\n    }\n  }\n\n  go('x', 'y')\n  go('y', 'x')\n\n  return cells\n}\n\nexport const Square: Tool<{ start?: Cell }> = {\n  name: 'square',\n  icon,\n  state: {},\n  cursor: 'crosshair',\n  onPointerDown: ({ x, y, canvas }, squareState) => {\n    squareState.start = <Cell>{ x, y }\n    canvas.setPreview(x, y)\n  },\n  onPointerUp: ({ canvas }) => {\n    canvas.applyPreview()\n  },\n  onPaint: ({ x, y, canvas }, squareState) => {\n    const end = <Cell>{ x, y }\n    canvas.clearPreview()\n\n    for (const cell of walkUntilMeet(squareState.start!, end)) {\n      canvas.setPreview(cell.x, cell.y)\n    }\n  },\n}\n","import { Tool } from '../Tool'\nimport { createSelection } from '../util'\nimport icon from '../../assets/text.png'\n\nexport const Text: Tool = {\n  name: 'text',\n  icon,\n  cursor: 'text',\n  onPointerUp: ({ x, y, state, canvas }) => {\n    const $prev = document.querySelector('#text-edit')\n\n    if ($prev) return $prev.remove()\n\n    createSelection({\n      x,\n      y,\n      state,\n      canvas,\n    })\n  },\n}\n","import { Tool } from '../Tool'\nimport { Cell } from '../Cell'\nimport icon from '../../assets/ellipse.png'\n\nexport const Ellipse: Tool<{ start?: Cell }> = {\n  name: 'ellipse',\n  icon,\n  state: {},\n  cursor: 'crosshair',\n  onPointerDown: ({ x, y, canvas }, squareState) => {\n    squareState.start = <Cell>{ x, y }\n    canvas.setPreview(x, y)\n  },\n  onPointerUp: ({ canvas }) => {\n    canvas.applyPreview()\n  },\n  onPaint: ({ x, y, canvas }, { start }) => {\n    if (!start) return\n    const end = <Cell>{ x, y }\n    canvas.clearPreview()\n\n    const distX = start.x - end.x\n    const distY = start.y - end.y\n\n    const distance = Math.sqrt(distX * distX + distY * distY) / 2\n\n    const step = (2 * Math.PI) / Math.round(distance * 10)\n    const r = distance\n\n    const heightRatio = Math.min(1, Math.abs(distY / distX))\n    const widthRatio = Math.min(1, Math.abs(distX / distY))\n\n    const originX = start.x - distX / 2\n    const originY = start.y - distY / 2\n\n    for (var theta = 0; theta < 2 * Math.PI; theta += step) {\n      const x = originX + widthRatio * r * Math.cos(theta)\n      const y = originY - heightRatio * r * Math.sin(theta)\n      canvas.setPreview(Math.round(x), Math.round(y))\n    }\n  },\n}\n","import { html, isMobile } from './util'\nimport { Tool } from './Tool'\nimport { State } from './State'\nimport { Pencil } from './Tool/Pencil'\nimport { Line } from './Tool/Line'\nimport { Eraser } from './Tool/Eraser'\nimport { Fill } from './Tool/Fill'\nimport { Square } from './Tool/Square'\nimport { Text } from './Tool/Text'\nimport { Ellipse } from './Tool/Ellipse'\n\nconst tools: Tool<any>[] = [Pencil, Eraser, Fill, Text, Line, Square, Ellipse]\n\nconst renderToolbar = (state: State, ctx: CanvasRenderingContext2D) =>\n  html('section', { className: 'toolbar' }, [\n    ...tools.map(tool =>\n      html(\n        'button',\n        {\n          className: 'tool',\n          onclick: e => {\n            const $el = <HTMLButtonElement>e.target\n\n            state.$toolRef?.classList.toggle('tool--active')\n            $el.classList.toggle('tool--active')\n\n            state.tool = tool\n            state.$toolRef = $el\n            ctx.canvas.style.cursor = tool.cursor || 'default'\n          },\n        },\n        [html('img', { src: tool.icon, style: { pointerEvents: 'none' } })],\n      ),\n    ),\n    html('footer', { className: 'toolbar-options' }, [\n      isMobile()\n        ? ''\n        : html('input', {\n            className: 'size-handle',\n            value: '1',\n            type: 'range',\n            max: '10',\n            min: '1',\n            step: '1',\n            onchange: e => (state.size = +(<HTMLInputElement>e.target).value),\n          }),\n    ]),\n  ])\n\nexport { renderToolbar }\n","import { html, htmlRaw } from './util'\nimport { State } from './State'\nimport { drawGrid, measureText, key, initCanvas } from './Canvas'\nimport { HistoryApi } from './History'\n\nconst canvasToString = (state: State) => {\n  let text = ''\n\n  for (let y = 0; y < state.height; y++) {\n    for (let x = 0; x < state.width; x++) {\n      const cell = state.canvas[key(x, y)]\n      text += cell?.value || ' '\n    }\n    text += '\\n'\n  }\n\n  return text\n}\n\nconst exportAsImg = () => {\n  const element = document.createElement('a')\n  element.setAttribute(\n    'href',\n    document.querySelector('canvas')!.toDataURL('image/png'),\n  )\n  element.setAttribute('download', 'untitled.png')\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n\n  element.click()\n\n  document.body.removeChild(element)\n}\n\nconst exportAsText = (state: State) => {\n  var element = document.createElement('a')\n  element.setAttribute(\n    'href',\n    'data:text/plain;charset=utf-8,' +\n      encodeURIComponent(canvasToString(state)),\n  )\n  element.setAttribute('download', 'untitled.txt')\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n\n  element.click()\n\n  document.body.removeChild(element)\n}\n\nconst copyContents = (state: State) => {\n  var textArea = document.createElement('textarea')\n  textArea.value = canvasToString(state)\n\n  textArea.style.top = '0'\n  textArea.style.left = '0'\n  textArea.style.position = 'fixed'\n\n  document.body.appendChild(textArea)\n  textArea.focus()\n  textArea.select()\n\n  try {\n    document.execCommand('copy')\n  } catch (err) {}\n\n  document.body.removeChild(textArea)\n}\n\nconst renderCharInputOption = (option: string, state: State) =>\n  html(\n    'li',\n    {\n      className: 'menu-item char-input__option',\n      onclick: () => {\n        state.char = option\n        ;(<HTMLInputElement>(\n          document.querySelector('.char-input')\n        )).value = option\n        document.body.click()\n      },\n    },\n    [html('span', {}, [option])],\n  )\n\nconst newCanvas = ({\n  state,\n  ctx,\n}: {\n  state: State\n  ctx: CanvasRenderingContext2D\n}) => {\n  let width: number, height: number\n  const $el = html('div', { className: 'box dialog' }, [\n    html(\n      'form',\n      {\n        onsubmit: (e: Event) => {\n          e.preventDefault()\n          state.width = width * state.cellWidth + 1\n          state.height = height * state.cellHeight + 1\n          state.canvas = {}\n          state.dirtyCells = []\n          state.history.updated = true\n\n          const newCanvas = initCanvas(state)\n\n          document.querySelector('canvas')?.replaceWith(newCanvas)\n          drawGrid(state, newCanvas.getContext('2d')!)\n          document.body.removeChild($el)\n        },\n      },\n      [\n        html('div', { className: 'dialog__content' }, [\n          html('label', { className: 'field' }, [\n            'Row size',\n            html('input', {\n              className: 'input',\n              onchange: e => (width = +(<HTMLInputElement>e.target).value),\n            }),\n          ]),\n          html('label', { className: 'field' }, [\n            'Column size',\n            html('input', {\n              className: 'input',\n              onchange: e => (height = +(<HTMLInputElement>e.target).value),\n            }),\n          ]),\n        ]),\n        html('button', { className: 'button', type: 'submit' }, ['start']),\n      ],\n    ),\n  ])\n\n  document.body.appendChild($el)\n}\n\nconst renderMenus = (\n  state: State,\n  ctx: CanvasRenderingContext2D,\n  history: HistoryApi,\n) =>\n  html('header', { className: 'menu' }, [\n    html('button', { className: 'menu-button menu-container' }, [\n      'file',\n      html('ul', { className: 'menu-list' }, [\n        html(\n          'li',\n          {\n            className: 'menu-item',\n            onclick: () => newCanvas({ state, ctx }),\n          },\n          [html('span', {}, ['New']), html('small', {}, ['Cmd+N'])],\n        ),\n        html(\n          'li',\n          {\n            className: 'menu-item',\n            onclick: () => {\n              if (navigator.share)\n                navigator.share({\n                  title: 'My awesome post!',\n                  text:\n                    'This post may or may not contain the answer to the universe',\n                  url: window.location.href,\n                })\n            },\n          },\n          [html('span', {}, ['Share'])],\n        ),\n        html(\n          'li',\n          {\n            className: 'menu-item',\n            onclick: () => copyContents(state),\n          },\n          [html('span', {}, ['Copy'])],\n        ),\n        html('li', { className: 'menu-item menu-container' }, [\n          html('span', {}, ['Export']),\n          html('small', {}, [\n            htmlRaw(`\n              <svg width=\"10\" height=\"11\" viewBox=\"0 0 10 11\" style=\"display:inline-block;vertical-align:middle\">\n                <path d=\"M7.5 4.33L0 8.66L0 0z\"></path>\n              </svg>\n            `),\n          ]),\n          html('ul', { className: 'menu-list menu-list--right' }, [\n            html('li', { className: 'menu-item' }, [\n              html('span', { onclick: () => exportAsText(state) }, [\n                'Text (.txt)',\n              ]),\n            ]),\n            html('li', { className: 'menu-item' }, [\n              html('span', { onclick: exportAsImg }, ['Image (.png)']),\n            ]),\n          ]),\n        ]),\n      ]),\n    ]),\n    html('button', { className: 'menu-button menu-container' }, [\n      'edit',\n      html('ul', { className: 'menu-list' }, [\n        html('li', { className: 'menu-item', onclick: () => history.back() }, [\n          html('span', {}, ['Undo']),\n          html('small', {}, ['Cmd+Z']),\n        ]),\n        html(\n          'li',\n          { className: 'menu-item', onclick: () => history.forward() },\n          [html('span', {}, ['Redo']), html('small', {}, ['Cmd+Shift+Z'])],\n        ),\n      ]),\n    ]),\n    // html('input', {\n    //   className: 'menu-button char-input',\n    //   value: '14',\n    //   onchange: e => {\n    //     const fontSize = +(<HTMLInputElement>e.target).value\n    //     const { width, height } = measureText(fontSize)\n\n    //     state.fontSize = fontSize\n    //     state.cellWidth = width\n    //     state.cellHeight = height\n    //     state.history.updated = true\n\n    //     drawGrid(state, ctx)\n    //   },\n    // }),\n    html('button', { className: 'menu-container char-input-container' }, [\n      html('input', {\n        className: 'menu-button char-input',\n        maxLength: 1,\n        value: '$',\n        onchange: e => (state.char = (<HTMLInputElement>e.target).value),\n      }),\n      html('ul', { className: 'menu-list' }, [\n        ...['$', '@', '/', ';', '(', ')'].map(c =>\n          renderCharInputOption(c, state),\n        ),\n      ]),\n    ]),\n    html('input', {\n      className: 'menu-button color-picker',\n      type: 'color',\n      value: '#d238a8',\n      onchange: e => (state.color = (<HTMLInputElement>e.target).value),\n    }),\n  ])\n\nexport { renderMenus }\n","import { initialState, getRealCoords, State } from './State'\nimport { draw, initCanvas, makeApi, drawGrid, measureText } from './Canvas'\nimport { history } from './History'\nimport { renderToolbar } from './Toolbar'\nimport { renderMenus } from './Menu'\nimport { html, isMobile, createSelection } from './util'\n\nconst state = { ...initialState }\nconst $canvas = initCanvas(state)\nconst ctx = $canvas.getContext('2d')!\n\nlet stopped = false\n\nconst init = () => {\n  document.body.appendChild(\n    html('main', {}, [\n      renderMenus(state, ctx, history(state)),\n      html('div', { className: 'content' }, [\n        renderToolbar(state, ctx),\n        html('div', { className: 'canvas-container' }, [$canvas]),\n        isMobile()\n          ? html('div', { className: 'size-handle-wrapper' }, [\n              html('input', {\n                className: 'size-handle',\n                value: '1',\n                type: 'range',\n                max: '10',\n                min: '1',\n                step: '1',\n                onchange: e =>\n                  (state.size = +(<HTMLInputElement>e.target).value),\n              }),\n            ])\n          : '',\n      ]),\n    ]),\n  )\n  ;(<HTMLButtonElement>document.querySelector('.tool')).click()\n\n  const offsetX = $canvas.offsetLeft\n  const offsetY = $canvas.offsetTop\n\n  const useToolHandler = (\n    key: 'onPointerDown' | 'onPointerUp' | 'onPaint',\n    coords: { x: number; y: number },\n  ) => {\n    const handler = state.tool[key]\n\n    if (handler)\n      handler(\n        {\n          ...getRealCoords(coords.x - offsetX, coords.y - offsetY, state),\n          state,\n          canvas: makeApi(state),\n        },\n        state.tool.state,\n      )\n  }\n\n  const handleMouseDown = (coords: { x: number; y: number }) => {\n    state.pressing = true\n    useToolHandler('onPointerDown', coords)\n    history(state).track()\n  }\n  const handleMouseUp = (coords: { x: number; y: number }) => {\n    state.pressing = false\n    useToolHandler('onPointerUp', coords)\n    useToolHandler('onPaint', coords)\n  }\n  const handleMouseMove = (coords: { x: number; y: number }) => {\n    if (state.pressing) useToolHandler('onPaint', coords)\n  }\n\n  const getTouchCoords = (e: TouchEvent) => ({\n    x: e.changedTouches[0].pageX,\n    y: e.changedTouches[0].pageY,\n  })\n\n  if (isMobile()) {\n    $canvas.addEventListener('touchstart', e =>\n      handleMouseDown(getTouchCoords(e)),\n    )\n    $canvas.addEventListener('touchend', e => handleMouseUp(getTouchCoords(e)))\n    $canvas.addEventListener('touchmove', e =>\n      handleMouseMove(getTouchCoords(e)),\n    )\n  } else {\n    $canvas.addEventListener('mousedown', e => handleMouseDown(e))\n    $canvas.addEventListener('mouseup', e => handleMouseUp(e))\n    $canvas.addEventListener('mousemove', e => {\n      handleMouseMove(e)\n      e.stopPropagation()\n    })\n  }\n\n  document.addEventListener('keydown', e => {\n    state.keys[e.key] = true\n  })\n  document.addEventListener('keyup', e => {\n    state.keys[e.key] = false\n  })\n\n  const { width, height } = measureText(14)\n  state.cellWidth = width\n  state.cellHeight = height\n\n  drawGrid(state, ctx)\n  loop()\n}\n\nconst shortcuts: [string, () => void][] = [\n  ['Meta+Shift+z', () => history(state).forward()],\n  ['Meta+z', () => history(state).back()],\n]\n\nconst modifierKeys = ['Shift', 'Meta', 'Ctrl']\n\nconst loop = () => {\n  const shortcut = shortcuts.find(([keys]) =>\n    keys.split('+').every(key => state.keys[key]),\n  )\n\n  if (shortcut) {\n    shortcut[1]()\n    state.keys = modifierKeys.reduce(\n      (acc, key) => ({ ...acc, [key]: state.keys[key] }),\n      {},\n    )\n  }\n\n  draw(state, ctx)\n  if (!stopped) requestAnimationFrame(loop)\n}\n\nwindow.addEventListener('load', () => window.scrollTo(0, 0))\ndocument.addEventListener('DOMContentLoaded', init)\ndocument.addEventListener('paste', event => {\n  const $prev = document.querySelector('#text-edit')\n\n  if ($prev) $prev.remove()\n\n  let paste = (event.clipboardData || window.clipboardData)!.getData('text')\n\n  createSelection({\n    x: 0,\n    y: 0,\n    state,\n    text: paste,\n    canvas: makeApi(state),\n  })\n\n  event.preventDefault()\n})\n"]}