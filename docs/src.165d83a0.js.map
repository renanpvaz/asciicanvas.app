{"version":3,"sources":["src/Canvas.ts","src/util.ts","src/Tool/Pencil.ts","src/State.ts","src/History.ts","src/Tool/Line.ts","src/Tool/Eraser.ts","src/Tool/Fill.ts","src/Tool/Square.ts","src/Tool/Text.ts","src/Tool/Ellipse.ts","src/Toolbar.ts","src/Menu.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.165d83a0.js","sourceRoot":"..","sourcesContent":["import { State } from './State'\nimport { Cell } from './Cell'\n\nexport type Canvas = {\n  get: (x: number, y: number) => Cell | undefined\n  set: (x: number, y: number, char?: string) => void\n  setAll: (cells: Cell[], char?: string) => void\n  setPreview: (x: number, y: number, char?: string) => void\n  clearPreview: () => void\n  applyPreview: () => void\n}\n\nconst createCanvas = (width: number, height: number) => {\n  const $canvas = document.createElement('canvas')\n  const ctx = $canvas.getContext('2d')!\n  const dpr = window.devicePixelRatio || 1\n\n  $canvas.width = width * dpr\n  $canvas.height = height * dpr\n  $canvas.style.width = `${width}px`\n  $canvas.style.height = `${height}px`\n  ctx.scale(dpr, dpr)\n\n  return $canvas\n}\n\nconst initCanvas = () => {\n  const $canvas = createCanvas(600, 400)\n  const ctx = $canvas.getContext('2d')!\n\n  ctx.font = '14px monospace'\n\n  return $canvas\n}\n\nexport const measureText = (fontSize: number) => {\n  const context = document.createElement('canvas').getContext('2d')!\n\n  context.font = `${fontSize}px monospace`\n\n  const metrics = context.measureText('$')\n\n  return {\n    width: metrics.width,\n    height: metrics.actualBoundingBoxAscent * 1.5,\n  }\n}\n\nexport const neighbors = ({ x, y }: Cell, state: State): Cell[] => [\n  <Cell>{ x: x + 1, y },\n  <Cell>{ x: x - 1, y },\n  <Cell>{ x, y: y + 1 },\n  <Cell>{ x, y: y - 1 },\n]\n\nexport const getNNeighbors = (radius: number, center: Cell, state: State) => {\n  if (radius === 1) return [center]\n  if (radius === 2) return [center, ...neighbors(center, state)]\n\n  const cells: Cell[] = []\n  const { sin, acos } = Math\n\n  for (let x = center.x - radius; x < center.x + radius; x++) {\n    const yspan = radius * sin(acos((center.x - x) / radius)) * 0.5\n    for (let y = center.y - yspan; y < center.y + yspan; y++) {\n      cells.push(<Cell>{ x, y: Math.round(y) })\n    }\n  }\n\n  return cells\n}\n\nconst isOutOfBounds = ({ x, y }: Cell, state: State): boolean =>\n  x > 600 / state.cellWidth ||\n  x < 0 ||\n  y > window.innerHeight / state.cellHeight ||\n  y < 0\n\nconst key = (x: number, y: number) => `${x},${y}`\n\nconst makeApi = (state: State): Canvas => {\n  const getWithDefault = (x: number, y: number): Cell =>\n    state.canvas[key(x, y)] || { x, y }\n\n  const get: Canvas['get'] = (x, y) =>\n    isOutOfBounds({ x, y, value: null, color: null }, state)\n      ? undefined\n      : getWithDefault(x, y)\n\n  const set = (x: number, y: number, char: string = state.char) => {\n    const prevCell = get(x, y)\n    const equal =\n      prevCell && prevCell.value === char && prevCell.color === state.color\n\n    if (!equal) {\n      const k = key(x, y)\n      state.canvas[k] = { value: char, color: state.color, x, y }\n      state.dirtyCells.push(k)\n    }\n  }\n\n  const setAll = (cells: Cell[], char?: string) =>\n    cells.forEach(c => set(c.x, c.y, char))\n\n  const setPreview = (x: number, y: number, char: string = state.char) => {\n    const k = key(x, y)\n\n    if (!isOutOfBounds(<Cell>{ x, y }, state))\n      state.preview[k] = {\n        value: char,\n        color: state.color,\n        x,\n        y,\n      }\n  }\n\n  const clearPreview = () => {\n    const cells = state.preview\n\n    for (const k in cells) {\n      const prevCell = get(cells[k].x, cells[k].y)\n      cells[k] = prevCell!\n    }\n  }\n\n  const applyPreview = () => {\n    const cells = state.preview\n\n    for (const k in cells) {\n      const cell = cells[k]\n      if (cell.value) state.canvas[k] = cell\n    }\n\n    state.preview = {}\n  }\n\n  return {\n    get,\n    set,\n    setPreview,\n    clearPreview,\n    applyPreview,\n    setAll,\n  }\n}\n\nconst drawGrid = (state: State, targetCtx: CanvasRenderingContext2D) => {\n  const $gridCanvas = createCanvas(600, 400)\n  const ctx = $gridCanvas.getContext('2d')!\n\n  ctx.strokeStyle = '#7b7b7b'\n  ctx.lineWidth = 0.5\n\n  for (let x = 0; x < 600; x += state.cellWidth) {\n    ctx.beginPath()\n    ctx.moveTo(x, 0)\n    ctx.lineTo(x, 400)\n    ctx.stroke()\n  }\n  for (let y = 0; y < 400; y += state.cellHeight) {\n    ctx.beginPath()\n    ctx.moveTo(0, y)\n    ctx.lineTo(600, y)\n    ctx.stroke()\n  }\n\n  targetCtx.canvas.style.backgroundImage = `url('${$gridCanvas.toDataURL()}')`\n}\n\nconst draw = (state: State, context: CanvasRenderingContext2D) => {\n  context.textBaseline = 'top'\n  context.font = `${state.fontSize}px monospace`\n\n  const drawCell = (cell: Cell) => {\n    if (!cell.value) return\n    context.fillStyle = cell.color\n    context.fillText(\n      cell.value,\n      cell.x * state.cellWidth,\n      cell.y * state.cellHeight,\n    )\n  }\n\n  const clearCell = (cell: Cell) => {\n    if (cell)\n      context.clearRect(\n        cell.x * state.cellWidth,\n        cell.y * state.cellHeight,\n        state.cellWidth,\n        state.cellHeight,\n      )\n  }\n\n  if (state.history.updated) {\n    context.clearRect(0, 0, context.canvas.width, context.canvas.height)\n    for (const key in state.canvas) {\n      const cell = state.canvas[key]\n      drawCell(cell)\n    }\n    return\n  }\n\n  for (const key in state.preview) {\n    const cell = state.preview[key]\n    clearCell(cell)\n    drawCell(cell)\n  }\n\n  for (const key of state.dirtyCells) {\n    const cell = state.canvas[key]\n    clearCell(cell)\n    drawCell(cell)\n  }\n\n  state.dirtyCells = []\n}\n\nexport { initCanvas, makeApi, draw, drawGrid, key }\n","const html = <K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  attributes: Partial<Omit<HTMLElementTagNameMap[K], 'style'>> & {\n    style?: Partial<CSSStyleDeclaration>\n  },\n  children?: (HTMLElement | string)[],\n): HTMLElementTagNameMap[K] => {\n  const $el = document.createElement(tag)\n  const { style = {}, ...attrs } = attributes\n\n  Object.assign($el.style, style)\n  Object.assign($el, attrs)\n  children?.forEach(c =>\n    $el.appendChild(typeof c === 'string' ? document.createTextNode(c) : c),\n  )\n\n  return $el\n}\n\nconst htmlRaw = (raw: string): HTMLElement =>\n  html('div', { innerHTML: raw }).firstElementChild as HTMLElement\n\nconst makeCursorFromSvg = (rawSvg: string) => {\n  const svg = htmlRaw(rawSvg)\n  const xml = new XMLSerializer().serializeToString(svg!)\n  const svg64 = btoa(xml)\n\n  return `url('${`data:image/svg+xml;base64,${svg64}`}'), auto`\n}\n\nexport { html, htmlRaw, makeCursorFromSvg }\n","import { Tool } from '../Tool'\nimport { getNNeighbors } from '../Canvas'\nimport { Cell } from '../Cell'\nimport { makeCursorFromSvg } from '../util'\n\nconst icon = `\n  <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"18\" height=\"18\" x=\"0px\" y=\"0px\" viewBox=\"0 0 383.947 383.947\" style=\"enable-background:new 0 0 383.947 383.947;\">\n      <polygon points=\"0,303.947 0,383.947 80,383.947 316.053,147.893 236.053,67.893 \t\t\t\"/>\n      <path d=\"M377.707,56.053L327.893,6.24c-8.32-8.32-21.867-8.32-30.187,0l-39.04,39.04l80,80l39.04-39.04\n        C386.027,77.92,386.027,64.373,377.707,56.053z\"/>\n  </svg>\n`\n\nexport const Pencil: Tool = {\n  name: 'pencil',\n  icon,\n  sizeable: true,\n  cursor: makeCursorFromSvg(icon),\n  onPaint: ({ x, y, canvas, state }) => {\n    canvas.setAll(getNNeighbors(state.size || 0, <Cell>{ x, y }, state))\n  },\n}\n","import { History } from './History'\nimport { CellMap } from './Cell'\nimport { Tool } from './Tool'\nimport { Pencil } from './Tool/Pencil'\n\nexport type State = {\n  pressing: boolean\n  canvas: CellMap\n  preview: CellMap\n  cellWidth: number\n  cellHeight: number\n  char: string\n  color: string\n  selectedTool: string\n  dirtyCells: string[]\n  history: History\n  keys: { [key: string]: boolean }\n  tool: Tool<any>\n  $toolRef: HTMLButtonElement | null\n  size: number | null\n  fontSize: number\n}\n\nexport const getRealCoords = (x: number, y: number, state: State) => ({\n  x: Math.floor(x / state.cellWidth),\n  y: Math.floor(y / state.cellHeight),\n})\n\nexport const initialState: State = {\n  pressing: false,\n  canvas: {},\n  preview: {},\n  cellHeight: 0,\n  cellWidth: 0,\n  char: '$',\n  color: '#d238a8',\n  selectedTool: 'pencil',\n  dirtyCells: [],\n  history: {\n    undo: [],\n    redo: [],\n    updated: false,\n  },\n  keys: {},\n  tool: Pencil,\n  $toolRef: null,\n  size: 1,\n  fontSize: 14,\n}\n","import { CellMap } from './Cell'\nimport { State } from './State'\n\nexport type History = {\n  undo: CellMap[]\n  redo: CellMap[]\n  updated: boolean\n}\n\ntype EntryType = 'undo' | 'redo'\n\nexport type HistoryApi = {\n  track: () => void\n  back: () => void\n  forward: () => void\n}\n\nconst history = (state: State): HistoryApi => {\n  const save = (type: EntryType) => {\n    const entries = state.history[type]\n    if (entries.length) {\n      track(type === 'undo' ? 'redo' : 'undo')\n      const entry = entries.pop()\n      state.canvas = entry || {}\n      state.history.updated = true\n    }\n  }\n\n  const track = (type: EntryType) => {\n    state.history[type].push({ ...state.canvas })\n    state.history.updated = false\n  }\n\n  const back = () => save('undo')\n  const forward = () => save('redo')\n\n  return {\n    track: () => {\n      state.history.redo = []\n      track('undo')\n    },\n    back,\n    forward,\n  }\n}\n\nexport { history }\n","import { Tool } from '../Tool'\nimport { Cell } from '../Cell'\n\nconst walkGrid = (p0: Cell, p1: Cell) => {\n  const dx = p1.x - p0.x\n  const dy = p1.y - p0.y\n\n  const nx = Math.abs(dx)\n  const ny = Math.abs(dy)\n\n  const sign_x = dx > 0 ? 1 : -1\n  const sign_y = dy > 0 ? 1 : -1\n\n  const p = { x: p0.x, y: p0.y }\n  const points = [{ x: p.x, y: p.y }]\n\n  for (let ix = 0, iy = 0; ix < nx || iy < ny; ) {\n    if ((0.5 + ix) / nx < (0.5 + iy) / ny) {\n      p.x += sign_x\n      ix += 1\n    } else {\n      p.y += sign_y\n      iy += 1\n    }\n    points.push({ x: p.x, y: p.y })\n  }\n\n  return points\n}\n\ntype LineState = {\n  start?: Cell\n}\n\nconst icon = `\n  <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 512 512\" style=\"enable-background:new 0 0 512 512;\">\n    <path d=\"M349.091,0v124.516L124.516,349.091H0V512h162.909V387.484l224.574-224.574H512V0H349.091z M54.303,457.696v-54.303\n      h54.303v54.303H54.303z M457.696,108.605h-54.303V54.303h54.303V108.605z\"/>\n  </svg>\n`\n\nexport const Line: Tool<LineState> = {\n  name: 'line',\n  icon,\n  state: {},\n  cursor: 'crosshair',\n  onPointerDown: ({ x, y }, lineState) => {\n    lineState.start = <Cell>{ x, y }\n  },\n  onPointerUp: ({ canvas }) => {\n    canvas.applyPreview()\n  },\n  onPaint: ({ x, y, canvas }, { start }) => {\n    const end = <Cell>{ x, y }\n\n    if (start) {\n      canvas.clearPreview()\n      walkGrid(start, end).forEach(point => canvas.setPreview(point.x, point.y))\n    }\n  },\n}\n","import { Tool } from '../Tool'\nimport { getNNeighbors } from '../Canvas'\nimport { Cell } from '../Cell'\n\nconst icon = `\n  <svg enable-background=\"new 0 0 467.765 467.765\" viewBox=\"0 0 467.765 467.765\">\n    <path d=\"m459.2 198.594-160.795-160.794c-11.42-11.42-29.921-11.42-41.34 0l-248.5 248.5c-11.42 11.42-11.42 29.921 0 41.34l102.324 102.324c5.482 5.482 12.919 8.565 20.67 8.565h116.941c7.751 0 15.189-3.083 20.67-8.565l190.03-190.029c11.42-11.42 11.42-29.921 0-41.341zm-222.805 181.465h-92.731l-73.088-73.088 82.91-82.91 119.454 119.454z\"/>\n  </svg>\n`\n\nexport const Eraser: Tool = {\n  name: 'eraser',\n  icon,\n  onPaint: ({ x, y, canvas, state }) =>\n    canvas.setAll(getNNeighbors(state.size || 0, <Cell>{ x, y }, state), ''),\n}\n","import { Tool } from '../Tool'\nimport { makeCursorFromSvg } from '../util'\n\nconst icon = `\n  <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"18\" height=\"18\" enable-background=\"new 0 0 467.766 467.766\" height=\"512\" viewBox=\"0 0 467.766 467.766\">\n    <path d=\"m169.359 371.494c5.71 5.71 13.19 8.565 20.67 8.565s14.96-2.855 20.67-8.565l181.464-181.464-190.028-190.03-41.34 41.34 31.748 31.748-140.125 140.124c-11.42 11.42-11.42 29.921 0 41.34 0 .001 116.941 116.942 116.941 116.942zm64.524-257.065 75.601 75.601-43.853 43.853h-151.202c0-.001 119.454-119.454 119.454-119.454z\"/><path d=\"m394.677 380.06c24.219 0 43.853-19.634 43.853-43.853s-43.853-73.088-43.853-73.088-43.853 48.869-43.853 73.088 19.634 43.853 43.853 43.853z\"/>\n    <path d=\"m29.236 409.295h409.294v58.471h-409.294z\"/>\n  </svg>\n`\n\nexport const Fill: Tool = {\n  name: 'fill',\n  icon,\n  cursor: makeCursorFromSvg(icon),\n  onPaint: ({ x, y, state, canvas }) => {\n    const target = canvas.get(x, y)\n\n    const fill = (color: string | null, x: number, y: number) => {\n      const cell = canvas.get(x, y)\n\n      if (!cell || cell.color !== color) return\n\n      canvas.set(x, y)\n\n      const fillNeighbors = () => {\n        fill(color, x + 1, y)\n        fill(color, x - 1, y)\n        fill(color, x, y + 1)\n        fill(color, x, y - 1)\n      }\n\n      if (state.dirtyCells.length > 1000) {\n        requestAnimationFrame(fillNeighbors)\n      } else {\n        fillNeighbors()\n      }\n    }\n\n    if (target) fill(target.color, x, y)\n  },\n}\n","import { Tool } from '../Tool'\nimport { Cell } from '../Cell'\nimport { State } from '../State'\n\nconst walkUntilMeet = (p0: Cell, p1: Cell): Cell[] => {\n  const cells: Cell[] = [p0, p1]\n\n  const go = (aAxis: 'x' | 'y', bAxis: 'x' | 'y') => {\n    let didMeet = false\n\n    const incA = p0[aAxis] < p1[aAxis] ? 1 : -1\n    const incB = p0[bAxis] < p1[bAxis] ? -1 : 1\n\n    let a = p0\n    let b = p1\n\n    while (!didMeet) {\n      const didAMeet = a[aAxis] === b[aAxis]\n      const didBMeet = a[bAxis] === b[bAxis]\n\n      if (!didAMeet) cells.push((a = <Cell>{ ...a, [aAxis]: a[aAxis] + incA }))\n      if (!didBMeet) cells.push((b = <Cell>{ ...b, [bAxis]: b[bAxis] + incB }))\n\n      didMeet = didAMeet && didBMeet\n    }\n  }\n\n  go('x', 'y')\n  go('y', 'x')\n\n  return cells\n}\n\nconst icon = `\n  <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 512 512\" style=\"enable-background:new 0 0 512 512;\">\n    <path d=\"M466.052,374.155V45.948H137.847V0H0v137.847h45.948v328.205h328.205V512H512V374.155H466.052z M91.897,91.897H45.948\n      V45.948h45.948V91.897z M420.103,374.153h-45.948v0.001v45.948H91.898V137.847h45.948v-45.95h282.256V374.153z M466.052,466.052\n      h-45.948v-45.948h45.948V466.052z\"/>\n  </svg>\n`\n\nexport const Square: Tool<{ start?: Cell }> = {\n  name: 'square',\n  icon,\n  state: {},\n  cursor: 'crosshair',\n  onPointerDown: ({ x, y, canvas }, squareState) => {\n    squareState.start = <Cell>{ x, y }\n    canvas.setPreview(x, y)\n  },\n  onPointerUp: ({ canvas }) => {\n    canvas.applyPreview()\n  },\n  onPaint: ({ x, y, canvas }, squareState) => {\n    const end = <Cell>{ x, y }\n    canvas.clearPreview()\n\n    for (const cell of walkUntilMeet(squareState.start!, end)) {\n      canvas.setPreview(cell.x, cell.y)\n    }\n  },\n}\n","import { Tool } from '../Tool'\nimport { Cell } from '../Cell'\nimport { html } from '../util'\n\ntype TextState = {\n  active: boolean\n}\n\nconst icon = `\n  <svg x=\"0px\" y=\"0px\" width=\"18\" height=\"20\">\n     <text x=\"50%\" y=\"70%\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"20\" font-family=\"serif\">T</text>\n  </svg>\n`\n\nexport const Text: Tool<TextState> = {\n  name: 'text',\n  icon,\n  cursor: 'text',\n  state: { active: false },\n  onPointerUp: ({ x, y, state, canvas }, textState) => {\n    const $prev = document.querySelector('#text-edit')\n\n    if ($prev) return $prev.remove()\n\n    const $el = html('p', {\n      id: 'text-edit',\n      contentEditable: 'true',\n      style: {\n        position: 'absolute',\n        top: `${y * state.cellHeight + 32}px`,\n        left: `${x * state.cellWidth + 31}px`,\n        fontSize: `${state.fontSize}px`,\n        fontFamily: 'monospace',\n        zIndex: '1',\n        padding: '0',\n        background: 'white',\n        border: '0',\n        margin: '0',\n        lineHeight: '1',\n        outline: '2px dashed #03A9F4',\n      },\n      textContent: '',\n      onkeyup: e => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n          e.preventDefault()\n          document.body.removeChild($el)\n          textState.active = false\n          $el.textContent?.split('').forEach((char, i) => {\n            canvas.set(x + i - 1, y, char)\n          })\n        }\n      },\n    })\n\n    document.body.appendChild($el)\n    $el.focus()\n  },\n}\n","import { Tool } from '../Tool'\nimport { Cell } from '../Cell'\n\nconst icon = `\n  <svg viewBox=\"0 0 512 512\">\n    <path d=\"m497 211h-20.535156c-17.949219-87.78125-87.683594-157.515625-175.464844-175.464844v-20.535156c0-8.285156-6.714844-15-15-15h-60c-8.285156 0-15 6.714844-15 15v20.53125c-42.101562 8.5625-80.519531 28.902344-111.761719 59.296875-32.746093 31.863281-54.675781 71.917969-63.691406 116.171875h-20.546875c-8.285156 0-15 6.714844-15 15v60c0 8.285156 6.714844 15 15 15h20.546875c17.996094 88.160156 87.332031 157.46875 175.453125 175.453125v20.546875c0 8.285156 6.714844 15 15 15h60c8.285156 0 15-6.714844 15-15v-20.535156c44.261719-9.027344 84.351562-30.996094 116.175781-63.710938 30.355469-31.203125 50.707031-69.652344 59.28125-111.753906h20.542969c8.285156 0 15-6.714844 15-15v-60c0-8.285156-6.714844-15-15-15zm-256-181h30v30h-30zm-211 211h30v30h-30zm241 241h-30v-30h30zm30-36.261719v-8.738281c0-8.285156-6.714844-15-15-15h-60c-8.285156 0-15 6.714844-15 15v8.742188c-71.523438-16.96875-127.769531-73.191407-144.746094-144.742188h8.746094c8.285156 0 15-6.714844 15-15v-60c0-8.285156-6.714844-15-15-15h-8.734375c16.984375-70.964844 74.015625-127.734375 144.734375-144.714844v8.714844c0 8.285156 6.714844 15 15 15h60c8.285156 0 15-6.714844 15-15v-8.734375c71.25 16.960937 127.773438 73.484375 144.734375 144.734375h-8.734375c-8.285156 0-15 6.714844-15 15v60c0 8.285156 6.714844 15 15 15h8.75c-16.925781 71.464844-72.964844 127.722656-144.75 144.738281zm181-174.738281h-30v-30h30zm0 0\"/>\n  </svg>\n`\n\nexport const Ellipse: Tool<{ start?: Cell }> = {\n  name: 'ellipse',\n  icon,\n  state: {},\n  cursor: 'crosshair',\n  onPointerDown: ({ x, y, canvas }, squareState) => {\n    squareState.start = <Cell>{ x, y }\n    canvas.setPreview(x, y)\n  },\n  onPointerUp: ({ canvas }) => {\n    canvas.applyPreview()\n  },\n  onPaint: ({ x, y, canvas }, { start }) => {\n    if (!start) return\n    const end = <Cell>{ x, y }\n    canvas.clearPreview()\n\n    const distX = start.x - end.x\n    const distY = start.y - end.y\n\n    const distance = Math.sqrt(distX * distX + distY * distY) / 2\n\n    const step = (2 * Math.PI) / Math.round(distance * 10)\n    const r = distance\n\n    const heightRatio = Math.min(1, Math.abs(distY / distX))\n    const widthRatio = Math.min(1, Math.abs(distX / distY))\n\n    const originX = start.x - distX / 2\n    const originY = start.y - distY / 2\n\n    for (var theta = 0; theta < 2 * Math.PI; theta += step) {\n      const x = originX + widthRatio * r * Math.cos(theta)\n      const y = originY - heightRatio * r * Math.sin(theta)\n      canvas.setPreview(Math.round(x), Math.round(y))\n    }\n  },\n}\n","import { html } from './util'\nimport { Tool } from './Tool'\nimport { State } from './State'\nimport { Pencil } from './Tool/Pencil'\nimport { Line } from './Tool/Line'\nimport { Eraser } from './Tool/Eraser'\nimport { Fill } from './Tool/Fill'\nimport { Square } from './Tool/Square'\nimport { Text } from './Tool/Text'\nimport { Ellipse } from './Tool/Ellipse'\n\nconst tools: Tool<any>[] = [Pencil, Line, Eraser, Fill, Square, Ellipse, Text]\n\nconst renderToolbar = (state: State, ctx: CanvasRenderingContext2D) =>\n  html('section', { className: 'toolbar' }, [\n    ...tools.map(tool =>\n      html('button', {\n        className: 'tool',\n        innerHTML: tool.icon,\n        onclick: e => {\n          const $el = <HTMLButtonElement>e.target\n\n          state.$toolRef?.classList.toggle('tool--active')\n          $el.classList.toggle('tool--active')\n\n          state.tool = tool\n          state.$toolRef = $el\n          ctx.canvas.style.cursor = tool.cursor || 'default'\n        },\n      }),\n    ),\n    html('footer', { className: 'toolbar-options' }, [\n      html('input', {\n        className: 'size-handle',\n        value: '1',\n        type: 'range',\n        max: '10',\n        min: '1',\n        step: '1',\n        onchange: e => (state.size = +(<HTMLInputElement>e.target).value),\n      }),\n    ]),\n  ])\n\nexport { renderToolbar }\n","import { html, htmlRaw } from './util'\nimport { State } from './State'\nimport { drawGrid, measureText, key } from './Canvas'\nimport { HistoryApi } from './History'\n\nconst exportAsImg = () => {\n  const element = document.createElement('a')\n  element.setAttribute(\n    'href',\n    document.querySelector('canvas')!.toDataURL('image/png'),\n  )\n  element.setAttribute('download', 'untitled.png')\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n\n  element.click()\n\n  document.body.removeChild(element)\n}\n\nconst exportAsText = (state: State) => {\n  let text = ''\n\n  for (let y = 0; y < 400; y++) {\n    for (let x = 0; x < 600; x++) {\n      const cell = state.canvas[key(x, y)]\n      text += cell?.value || ' '\n    }\n    text += '\\n'\n  }\n\n  console.log(text)\n\n  var element = document.createElement('a')\n  element.setAttribute(\n    'href',\n    'data:text/plain;charset=utf-8,' + encodeURIComponent(text),\n  )\n  element.setAttribute('download', 'untitled.txt')\n\n  element.style.display = 'none'\n  document.body.appendChild(element)\n\n  element.click()\n\n  document.body.removeChild(element)\n}\n\nconst renderMenus = (\n  state: State,\n  ctx: CanvasRenderingContext2D,\n  history: HistoryApi,\n) =>\n  html('header', { className: 'menu' }, [\n    html('button', { className: 'menu-button menu-container' }, [\n      'file',\n      html('ul', { className: 'menu-list' }, [\n        html('li', { className: 'menu-item' }, [\n          html('span', {}, ['New']),\n          html('small', {}, ['Cmd+Z']),\n        ]),\n        html('li', { className: 'menu-item menu-container' }, [\n          html('span', {}, ['Export']),\n          html('small', {}, [\n            htmlRaw(`\n              <svg width=\"10\" height=\"11\" viewBox=\"0 0 10 11\" style=\"fill:white;display:inline-block;vertical-align:middle\">\n                <path d=\"M7.5 4.33L0 8.66L0 0z\"></path>\n              </svg>\n            `),\n          ]),\n          html('ul', { className: 'menu-list menu-list--right' }, [\n            html('li', { className: 'menu-item' }, [\n              html('span', { onclick: () => exportAsText(state) }, [\n                'Text (.txt)',\n              ]),\n            ]),\n            html('li', { className: 'menu-item' }, [\n              html('span', { onclick: exportAsImg }, ['Image (.png)']),\n            ]),\n          ]),\n        ]),\n      ]),\n    ]),\n    html('button', { className: 'menu-button menu-container' }, [\n      'edit',\n      html('ul', { className: 'menu-list' }, [\n        html('li', { className: 'menu-item', onclick: () => history.back() }, [\n          html('span', {}, ['Undo']),\n          html('small', {}, ['Cmd+Z']),\n        ]),\n        html(\n          'li',\n          { className: 'menu-item', onclick: () => history.forward() },\n          [html('span', {}, ['Redo']), html('small', {}, ['Cmd+Shift+Z'])],\n        ),\n      ]),\n    ]),\n    html('input', {\n      className: 'menu-button char-input',\n      value: '14',\n      onchange: e => {\n        const fontSize = +(<HTMLInputElement>e.target).value\n        const { width, height } = measureText(fontSize)\n\n        state.fontSize = fontSize\n        state.cellWidth = width\n        state.cellHeight = height\n        state.history.updated = true\n\n        drawGrid(state, ctx)\n      },\n    }),\n    html('input', {\n      className: 'menu-button char-input',\n      maxLength: 1,\n      value: '$',\n      onchange: e => (state.char = (<HTMLInputElement>e.target).value),\n    }),\n    html('input', {\n      className: 'menu-button color-picker',\n      type: 'color',\n      value: '#d238a8',\n      onchange: e => (state.color = (<HTMLInputElement>e.target).value),\n    }),\n  ])\n\nexport { renderMenus }\n","import { initialState, getRealCoords, State } from './State'\nimport { draw, initCanvas, makeApi, drawGrid, measureText } from './Canvas'\nimport { history } from './History'\nimport { renderToolbar } from './Toolbar'\nimport { renderMenus } from './Menu'\nimport { html } from './util'\n\nconst state = { ...initialState }\nconst $canvas = initCanvas()\nconst ctx = $canvas.getContext('2d')!\nlet stopped = false\n\nconst useToolHandler = (\n  key: 'onPointerDown' | 'onPointerUp' | 'onPaint',\n  e: MouseEvent,\n) => {\n  const handler = state.tool[key]\n\n  if (handler)\n    handler(\n      {\n        ...getRealCoords(e.x - 32, e.y - 32, state),\n        state,\n        canvas: makeApi(state),\n      },\n      state.tool.state,\n    )\n}\n\nconst init = () => {\n  document.body.appendChild(\n    html('main', {}, [\n      renderMenus(state, ctx, history(state)),\n      html('div', { className: 'content' }, [\n        renderToolbar(state, ctx),\n        html('div', { className: 'canvas-container' }, [$canvas]),\n      ]),\n    ]),\n  )\n  ;(<HTMLButtonElement>document.querySelector('.tool')).click()\n\n  $canvas.addEventListener('mousedown', e => {\n    state.pressing = true\n    useToolHandler('onPointerDown', e)\n    history(state).track()\n  })\n  $canvas.addEventListener('mouseup', e => {\n    state.pressing = false\n    useToolHandler('onPointerUp', e)\n    useToolHandler('onPaint', e)\n  })\n  $canvas.addEventListener('mousemove', e => {\n    if (state.pressing) useToolHandler('onPaint', e)\n  })\n  document.addEventListener('keydown', e => {\n    state.keys[e.key] = true\n  })\n  document.addEventListener('keyup', e => {\n    state.keys[e.key] = false\n  })\n\n  const { width, height } = measureText(14)\n  state.cellWidth = width\n  state.cellHeight = height\n\n  drawGrid(state, ctx)\n  loop()\n}\n\nconst shortcuts: [string, () => void][] = [\n  ['Meta+Shift+z', () => history(state).forward()],\n  ['Meta+z', () => history(state).back()],\n]\n\nconst modifierKeys = ['Shift', 'Meta', 'Ctrl']\n\nconst loop = () => {\n  const shortcut = shortcuts.find(([keys]) =>\n    keys.split('+').every(key => state.keys[key]),\n  )\n\n  if (shortcut) {\n    shortcut[1]()\n    state.keys = modifierKeys.reduce(\n      (acc, key) => ({ ...acc, [key]: state.keys[key] }),\n      {},\n    )\n  }\n\n  draw(state, ctx)\n  if (!stopped) requestAnimationFrame(loop)\n}\n\ndocument.addEventListener('DOMContentLoaded', init)\n"]}